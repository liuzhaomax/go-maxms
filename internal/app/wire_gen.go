// Code generated by Wire. DO NOT EDIT.

//go:generate go run github.com/google/wire/cmd/wire
//go:build !wireinject
// +build !wireinject

package app

import (
	"github.com/liuzhaomax/go-maxms/internal/api"
	"github.com/liuzhaomax/go-maxms/internal/core"
	"github.com/liuzhaomax/go-maxms/internal/middleware"
	"github.com/liuzhaomax/go-maxms/internal/middleware/auth"
	"github.com/liuzhaomax/go-maxms/internal/middleware/reverse_proxy"
	"github.com/liuzhaomax/go-maxms/src/api_user/business"
	"github.com/liuzhaomax/go-maxms/src/api_user/handler"
	"github.com/liuzhaomax/go-maxms/src/api_user/model"
)

// Injectors from wire.go:

func InitInjector() (*Injector, func(), error) {
	engine := core.InitGinEngine()
	logger := core.InitGinLogger()
	authAuth := &auth.Auth{
		Logger: logger,
	}
	reverseProxy := &reverse_proxy.ReverseProxy{
		Logger: logger,
	}
	middlewareMiddleware := &middleware.Middleware{
		Auth:         authAuth,
		ReverseProxy: reverseProxy,
	}
	db, cleanup, err := core.InitDB()
	if err != nil {
		return nil, nil, err
	}
	modelUser := &model.ModelUser{
		DB: db,
	}
	trans := &core.Trans{
		DB: db,
	}
	businessUser := &business.BusinessUser{
		Model:  modelUser,
		Logger: logger,
		Tx:     trans,
	}
	response := &core.Response{
		Logger: logger,
	}
	handlerUser := &handler.HandlerUser{
		Business: businessUser,
		Logger:   logger,
		IRes:     response,
	}
	apiHandler := &api.Handler{
		Middleware:  middlewareMiddleware,
		HandlerUser: handlerUser,
	}
	injector := &Injector{
		Engine:  engine,
		Handler: apiHandler,
		DB:      db,
	}
	return injector, func() {
		cleanup()
	}, nil
}
