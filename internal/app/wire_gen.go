// Code generated by Wire. DO NOT EDIT.

//go:generate go run -mod=mod github.com/google/wire/cmd/wire
//go:build !wireinject
// +build !wireinject

package app

import (
	"github.com/liuzhaomax/go-maxms/internal/api"
	"github.com/liuzhaomax/go-maxms/internal/core/config"
	"github.com/liuzhaomax/go-maxms/internal/core/ext"
	"github.com/liuzhaomax/go-maxms/internal/core/pool"
	"github.com/liuzhaomax/go-maxms/internal/core/pool/ws"
	"github.com/liuzhaomax/go-maxms/internal/middleware"
	"github.com/liuzhaomax/go-maxms/internal/middleware/auth"
	"github.com/liuzhaomax/go-maxms/internal/middleware/reverse_proxy"
	"github.com/liuzhaomax/go-maxms/internal/middleware/tracing"
	"github.com/liuzhaomax/go-maxms/internal/middleware/validator"
	"github.com/liuzhaomax/go-maxms/internal/middleware/ws_upgrader"
	"github.com/liuzhaomax/go-maxms/internal/middleware_rpc"
	auth2 "github.com/liuzhaomax/go-maxms/internal/middleware_rpc/auth"
	tracing2 "github.com/liuzhaomax/go-maxms/internal/middleware_rpc/tracing"
	validator2 "github.com/liuzhaomax/go-maxms/internal/middleware_rpc/validator"
	"github.com/liuzhaomax/go-maxms/src/api_user/handler"
	"github.com/liuzhaomax/go-maxms/src/api_user/model"
	handler2 "github.com/liuzhaomax/go-maxms/src/api_user_rpc/handler"
	model2 "github.com/liuzhaomax/go-maxms/src/api_user_rpc/model"
)

// Injectors from wire.go:

func InitInjector() (*Injector, func(), error) {
	engine := config.InitGinEngine()
	entry := config.InitLogrusEntry()
	client, cleanup, err := config.InitRedis()
	if err != nil {
		return nil, nil, err
	}
	authAuth := &auth.Auth{
		Logger: entry,
		Redis:  client,
	}
	validatorValidator := &validator.Validator{
		Logger: entry,
		Redis:  client,
	}
	configuration := config.InitTracer()
	tracingTracing := &tracing.Tracing{
		Logger:       entry,
		TracerConfig: configuration,
	}
	reverseProxy := &reverse_proxy.ReverseProxy{
		Logger:      entry,
		RedisClient: client,
	}
	upgrader := config.InitWebSocket()
	wsUpgrader := &ws_upgrader.WsUpgrader{
		Logger:   entry,
		Upgrader: upgrader,
	}
	middlewareMiddleware := &middleware.Middleware{
		Auth:         authAuth,
		Validator:    validatorValidator,
		Tracing:      tracingTracing,
		ReverseProxy: reverseProxy,
		WsUpgrader:   wsUpgrader,
	}
	db, cleanup2, err := config.InitDB()
	if err != nil {
		cleanup()
		return nil, nil, err
	}
	modelUser := &model.ModelUser{
		DB: db,
	}
	rocketMQ := &config.RocketMQ{}
	trans := &ext.Trans{
		DB: db,
	}
	wsPool := ws.InitWsPool()
	handlerUser := &handler.HandlerUser{
		Model:    modelUser,
		Logger:   entry,
		RocketMQ: rocketMQ,
		Tx:       trans,
		Redis:    client,
		Pool:     wsPool,
	}
	registry := config.InitPrometheusRegistry()
	apiHandler := &api.Handler{
		Middleware:         middlewareMiddleware,
		HandlerUser:        handlerUser,
		PrometheusRegistry: registry,
	}
	injectorHTTP := InjectorHTTP{
		Engine:  engine,
		Handler: apiHandler,
		DB:      db,
		Redis:   client,
	}
	handlerWs := &api.HandlerWs{
		Middleware:         middlewareMiddleware,
		Handler:            handlerUser,
		PrometheusRegistry: registry,
	}
	poolPool := pool.InitPool()
	injectorWS := InjectorWS{
		Engine:    engine,
		HandlerWs: handlerWs,
		DB:        db,
		Redis:     client,
		Pool:      poolPool,
	}
	logger := config.InitLogrus()
	authRPC := &auth2.AuthRPC{
		Logger: logger,
		Redis:  client,
	}
	validatorRPC := &validator2.ValidatorRPC{
		Logger: logger,
		Redis:  client,
	}
	tracingRPC := &tracing2.TracingRPC{
		Logger:       logger,
		TracerConfig: configuration,
	}
	middlewareRPC := &middleware_rpc.MiddlewareRPC{
		AuthRPC:      authRPC,
		ValidatorRPC: validatorRPC,
		TracingRPC:   tracingRPC,
	}
	modelModelUser := &model2.ModelUser{
		DB: db,
	}
	handlerHandlerUser := &handler2.HandlerUser{
		Model:    modelModelUser,
		Tx:       trans,
		Redis:    client,
		RocketMQ: rocketMQ,
		Logger:   logger,
	}
	handlerRPC := &api.HandlerRPC{
		PrometheusRegistry: registry,
		MiddlewareRPC:      middlewareRPC,
		HandlerRPC:         handlerHandlerUser,
	}
	injectorRPC := InjectorRPC{
		HandlerRPC: handlerRPC,
		DB:         db,
		Redis:      client,
	}
	injector := &Injector{
		InjectorHTTP: injectorHTTP,
		InjectorWS:   injectorWS,
		InjectorRPC:  injectorRPC,
	}
	return injector, func() {
		cleanup2()
		cleanup()
	}, nil
}
